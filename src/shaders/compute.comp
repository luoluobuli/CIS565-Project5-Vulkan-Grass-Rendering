#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
#define GRAVITY -100.0
#define WIND_DIR vec3(1.0, 0.0, 0.3)
#define WIND_SPEED 1.5
#define WIND_AMP 1000.0
#define ORIENTATION_THRESHOLD 0.5
#define FRUSTUM_TOLERANCE 0.1
#define DISTANCE_NUMBUCKETS 5
#define DISTANCE_MAX 30.0

layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0; // x,y,z = position, w = orientation
    vec4 v1; // x,y,z = control point, w = height
    vec4 v2; // x,y,z = tip position, w = width
    vec4 up; // x,y,z = up vector, w = stiffness
};

// TODO: Add bindings to:
// 1. Store the input blades

layout(set = 2, binding = 0) buffer InputBlades {
    Blade blades[];
} inputBlades;

// 2. Write out the culled blades

layout(set = 2, binding = 1) buffer CulledBlades {
    Blade blades[];
} culledBlades;

// 3. Write the total number of blades remaining

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like

layout(set = 2, binding = 2) buffer NumBlades {
    uint vertexCount;   // Write the number of blades remaining here
    uint instanceCount; // = 1
    uint firstVertex;   // = 0
    uint firstInstance; // = 0
} numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

// ----------- Helper functions ------------
// Compute 2D noise
float hash(vec2 p)
{
    return fract(sin(dot(p, vec2(127.1, 311.7))) * 43758.5453123);
}

float noise(vec2 p)
{
    vec2 i = floor(p);
    vec2 f = fract(p);
    float a = hash(i);
    float b = hash(i + vec2(1.0, 0.0));
    float c = hash(i + vec2(0.0, 1.0));
    float d = hash(i + vec2(1.0, 1.0));
    vec2 u = f * f * (3.0 - 2.0 * f);
    return mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;
}

// Compute wind
vec3 computeWind(vec3 windDir, float windSpeed, float windAmp, vec3 pos, float totalTime) {
    float phase = dot(pos.xz - windDir.xz * totalTime * 0.5, vec2(0.05, 0.08));

    float w1 = sin(phase * 1.0 + totalTime * windSpeed);
    float w2 = cos(phase * 2.3 + totalTime * windSpeed * 1.3);
    float w3 = sin(phase * 0.7 - totalTime * windSpeed * 0.7);

    float strength = windAmp * (w1 + 0.5 * w2 + 0.3 * w3);

    float n = noise(pos.xz + totalTime);
    n = n * 2.0 - 1.0;
    strength += n;

    return windDir * strength;
}

// Orientation culling
bool cullByOrientation(vec3 v0, vec3 forward, float threshold, vec3 cameraPos) {
    vec3 viewVec = normalize(v0 - cameraPos);
    viewVec.y = 0.0;
    viewVec = normalize(viewVec);
    float facing = abs(dot(forward, viewVec));

    return facing < threshold;
}

// Test if the point is outside view frustum
bool isOutsideFrustum(vec3 pos, float tolerance)
{
    vec4 clip = camera.proj * camera.view * vec4(pos, 1.0);
    vec3 ndc = clip.xyz / clip.w;
    float bound = 1.0 + tolerance;
    return ndc.x < -bound || ndc.x > bound ||
           ndc.y < -bound || ndc.y > bound ||
           ndc.z < -bound || ndc.z > bound;
}

// View frusturm culling
bool cullByFrustum(vec3 v0, vec3 v1, vec3 v2, float tolerance) {
    vec3 m = 0.25 * v0 + 0.5 * v1 + 0.25 * v2;
    bool v0Out = isOutsideFrustum(v0, tolerance);
    bool v2Out = isOutsideFrustum(v2, tolerance);
    bool mOut  = isOutsideFrustum(m, tolerance);

    return v0Out && v2Out && mOut;
}

// Distance culling
bool cullByDistance(vec3 v0, vec3 up, float d_max, uint n, uint idx, vec3 cameraPos) {
    float d = length(v0 - cameraPos);
    if (d > d_max) return true;

    float d_proj = length(v0 - cameraPos - up * dot(v0 - cameraPos, up));
    return (mod(idx, n) < floor(n * (1.0 - d_proj / d_max)));
}

// -----------------------------------------

void main() {
    uint idx = gl_GlobalInvocationID.x;
	// Reset the number of blades to 0
	if (idx == 0) {
		numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

    if (idx >= inputBlades.blades.length()) return;

    // TODO: Apply forces on every blade and update the vertices in the buffer
    Blade inBlade = inputBlades.blades[idx];
    vec3 v0 = inBlade.v0.xyz;
    vec3 v1 = inBlade.v1.xyz;
    vec3 v2 = inBlade.v2.xyz;
    vec3 up = inBlade.up.xyz;
    float orientation = inBlade.v0.w;
    float height = inBlade.v1.w;
    float stiffness = inBlade.up.w;

    // Apply gravity
    vec3 forward = normalize(vec3(cos(orientation), 0.0, sin(orientation)));
    vec3 gE = vec3(0.0, GRAVITY, 0.0);
    vec3 gF = 0.25 * length(gE) * forward;
    vec3 gravity = gE + gF;

    // Apply recovery
    vec3 iv2 = v0 + height * up;
    vec3 recovery = (iv2 - inBlade.v2.xyz) * stiffness;

    // Apply wind
    vec3 windDir = normalize(WIND_DIR);
    vec3 windInfluence = computeWind(windDir, WIND_SPEED, WIND_AMP, v0, totalTime);
    float fd = 1 - abs(dot(normalize(v2 - v0), normalize(windDir))); // directional alignment
    float fr = dot(v2 - v0, up) / height; // height ratio
    vec3 wind = windInfluence * fd * fr;

    v2 += (gravity + recovery + wind) * 0.0005;

    // Validation
    // - Make sure the tip of the blade doesn't go below the ground
    v2 = v2 - up * min(dot(up, v2 - v0), 0.0);

    // - Calculate v1 accordingly
    float l_proj = length(v2 - v0 - up * dot(up, v2 - v0));
    v1 = v0 + height * up * max(1.0 - l_proj / height, 0.05 * max(l_proj / height, 1));

    // - Keep the blade length constant
    float L0 = length(v2 - v0);
    float L1 = length(v1 - v0) + length(v2 - v1);
    float L = (2 * L0 + L1) / 3.0;
    float r = height / L;
    v1 = v0 + r * (v1 - v0);
    v2 = v1 + r * (v2 - v1);

    inBlade.v1.xyz = v1;
    inBlade.v2.xyz = v2;

	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads

    vec3 cameraPos = inverse(camera.view)[3].xyz;
    // Orientation culling
    if (cullByOrientation(v0, forward, ORIENTATION_THRESHOLD, cameraPos)) return;

    // View frustum culling
    if (cullByFrustum(v0, v1, v2, FRUSTUM_TOLERANCE)) return;

    // Distance culling
    if (cullByDistance(v0, up, DISTANCE_MAX, DISTANCE_NUMBUCKETS, idx, cameraPos)) return;

    uint dst = atomicAdd(numBlades.vertexCount, 1);
    culledBlades.blades[dst] = inBlade;
}
